name: Flutter Linux Packaging - FinMusic

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d '"')
          echo "Extracted version: $VERSION"
          echo "::set-output name=version::$VERSION"
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            dpkg

      - name: Build Linux (Release)
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          flutter build linux --release

      - name: Generate .deb package
        run: |
          # Crear estructura de directorios
          mkdir -p deb_package/{usr/local/bin,usr/share/icons/hicolor/512x512/apps,usr/share/applications,DEBIAN}
      
          # Copiar archivos
          cp -r build/linux/x64/release/bundle/* deb_package/usr/local/bin/
          cp assets/icon.png deb_package/usr/share/icons/hicolor/512x512/apps/finmusic.png
      
          # Archivo .desktop
          cat > deb_package/usr/share/applications/finmusic.desktop <<'EOL'
          [Desktop Entry]
          Name=FinMusic
          Exec=/usr/local/bin/finmusic
          Icon=finmusic
          Type=Application
          Categories=Audio;Music;
          EOL
          
          # Archivo control con versión del pubspec.yaml
          cat > deb_package/DEBIAN/control <<EOL
          Package: finmusic
          Version: ${{ steps.version.outputs.version }}
          Section: sound
          Priority: optional
          Architecture: amd64
          Maintainer: Pablo <pereacampospablo@gmail.com>
          Description: Reproductor de música FinMusic
          Depends: libgtk-3-0, liblzma5, gstreamer1.0-plugins-base
          EOL
    
          # Build .deb
          dpkg-deb --build deb_package finmusic_${{ steps.version.outputs.version }}.deb

      - name: Generate AppImage
        run: |
          # 1. Verificar estructura del directorio bundle
          echo "=== Estructura del directorio bundle ==="
          find build/linux/x64/release/bundle -type f -print
      
          # 2. Identificar el ejecutable principal (binario ELF)
          EXECUTABLE=$(find build/linux/x64/release/bundle -maxdepth 1 -type f -executable -exec file {} \; | grep ELF | cut -d: -f1 | xargs basename)
          
          if [ -z "$EXECUTABLE" ]; then
            echo "❌ Error crítico: No se encontró ningún binario ejecutable ELF"
            echo "Posibles causas:"
            echo "1. La compilación falló silenciosamente"
            echo "2. El ejecutable tiene permisos incorrectos"
            echo "3. La estructura de directorios cambió"
            exit 1
          fi
      
          echo "✅ Ejecutable identificado: $EXECUTABLE"
      
          # 3. Verificar archivos esenciales
          DESKTOP_FILE="${EXECUTABLE}.desktop"
          if [ ! -f "build/linux/x64/release/bundle/$DESKTOP_FILE" ]; then
            echo "⚠️ Advertencia: Archivo .desktop no encontrado, generando uno básico"
            cat > "build/linux/x64/release/bundle/$DESKTOP_FILE" <<EOL
            [Desktop Entry]
            Name=FinMusic
            Exec=$EXECUTABLE
            Icon=finmusic
            Type=Application
            Categories=Audio;Music;
            EOL
          fi
      
          # 4. Manejo del icono (con múltiples ubicaciones posibles)
          ICON_PATHS=(
            "build/linux/x64/release/bundle/data/flutter_assets/assets/icon.png"
            "build/linux/x64/release/bundle/icon.png"
            "assets/icon.png"
          )
      
          for path in "${ICON_PATHS[@]}"; do
            if [ -f "$path" ]; then
              ICON_FILE="$path"
              break
            fi
          done
      
          if [ -z "$ICON_FILE" ]; then
            echo "⚠️ Advertencia: No se encontró el archivo de icono"
            ICON_FILE="/dev/null"
          fi
      
          # 5. Generar AppImage con verificación exhaustiva
          echo "▶️ Preparando para generar AppImage..."
          echo "Ejecutable: build/linux/x64/release/bundle/$EXECUTABLE"
          echo "Desktop file: build/linux/x64/release/bundle/$DESKTOP_FILE"
          echo "Icon file: $ICON_FILE"
      
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
      
          ./linuxdeploy-x86_64.AppImage \
            --appdir AppDir \
            --executable "build/linux/x64/release/bundle/$EXECUTABLE" \
            --desktop-file "build/linux/x64/release/bundle/$DESKTOP_FILE" \
            --icon-file "$ICON_FILE" \
            --output appimage
      
          # 6. Nombrar el archivo final
          VERSION=${{ steps.version.outputs.version }}
          if [ -f *.AppImage ]; then
            mv *.AppImage "finmusic_$VERSION.AppImage"
            echo "✅ AppImage generado exitosamente: finmusic_$VERSION.AppImage"
          else
            echo "❌ Error inesperado: No se generó el archivo AppImage"
            exit 1
          fi

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: FinMusic ${{ steps.version.outputs.version }}
          files: |
            finmusic_${{ steps.version.outputs.version }}.deb
            finmusic_${{ steps.version.outputs.version }}.AppImage
          draft: false
          prerelease: false
          replace_assets: true
