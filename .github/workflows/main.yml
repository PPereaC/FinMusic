name: "Build && Release"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev -y
          sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
          sudo apt-get install -y ninja-build cmake clang libgtk-3-dev libunwind-dev

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Create Install Directory
        run: mkdir -p ${{ github.workspace }}/install

      - name: Build Linux
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release
          mkdir -p ${{ github.workspace }}/install
          cp -r build/linux/x64/release/bundle/* ${{ github.workspace }}/install/

      - name: Build APK
        run: flutter build apk --release

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists 
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Empaquetar Linux (.deb y .appimage)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y patchelf ruby ruby-dev build-essential fuse
          sudo gem install --no-document fpm
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          
          # Crear .deb y renombrarlo
          fpm -s dir -t deb -n "finmusic" --version "${{ env.VERSION }}" -C ${{ github.workspace }}/install
          mv finmusic_${{ env.VERSION }}_amd64.deb app-release.deb
          
          # Preparar AppDir con archivo .desktop y copiar binarios
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          cp -r ${{ github.workspace }}/install/* AppDir/usr/bin/

          # Copiar el icono correcto
          cp linux/assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/finmusic.png
          
          # Crear archivo .desktop
          cat > AppDir/usr/share/applications/finmusic.desktop << EOF
          [Desktop Entry]
          Name=FinMusic
          Exec=finmusic
          Icon=finmusic
          Type=Application
          Categories=AudioVideo;Audio;Player;
          EOF
          
          # Crear AppImage
          ./appimagetool AppDir app-release.AppImage
  
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            app-release.deb
            app-release.AppImage
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}